// Code generated by "enumer -type=Gender -text -json -sql -typederrors -transform=lower -output=gender_generated.go"; DO NOT EDIT.

package models

import (
	"database/sql/driver"
	"encoding/json"
	"errors"
	"fmt"
	"github.com/dmarkham/enumer/enumerrs"
	"strings"
)

const _GenderName = "malefemale"

var _GenderIndex = [...]uint8{0, 4, 10}

const _GenderLowerName = "malefemale"

func (i Gender) String() string {
	i -= 1
	if i < 0 || i >= Gender(len(_GenderIndex)-1) {
		return fmt.Sprintf("Gender(%d)", i+1)
	}
	return _GenderName[_GenderIndex[i]:_GenderIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _GenderNoOp() {
	var x [1]struct{}
	_ = x[Male-(1)]
	_ = x[Female-(2)]
}

var _GenderValues = []Gender{Male, Female}

var _GenderNameToValueMap = map[string]Gender{
	_GenderName[0:4]:       Male,
	_GenderLowerName[0:4]:  Male,
	_GenderName[4:10]:      Female,
	_GenderLowerName[4:10]: Female,
}

var _GenderNames = []string{
	_GenderName[0:4],
	_GenderName[4:10],
}

// GenderString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func GenderString(s string) (Gender, error) {
	if val, ok := _GenderNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _GenderNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, errors.Join(enumerrs.ErrValueInvalid, fmt.Errorf("%s does not belong to Gender values", s))
}

// GenderValues returns all values of the enum
func GenderValues() []Gender {
	return _GenderValues
}

// GenderStrings returns a slice of all String values of the enum
func GenderStrings() []string {
	strs := make([]string, len(_GenderNames))
	copy(strs, _GenderNames)
	return strs
}

// IsAGender returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Gender) IsAGender() bool {
	for _, v := range _GenderValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Gender
func (i Gender) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Gender
func (i *Gender) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Gender should be a string, got %s", data)
	}

	var err error
	*i, err = GenderString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Gender
func (i Gender) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Gender
func (i *Gender) UnmarshalText(text []byte) error {
	var err error
	*i, err = GenderString(string(text))
	return err
}

func (i Gender) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Gender) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of Gender: %[1]T(%[1]v)", value)
	}

	val, err := GenderString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
