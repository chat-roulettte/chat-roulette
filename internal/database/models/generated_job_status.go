// Code generated by "enumer -type=jobStatusEnum -trimprefix=JobStatus -text -sql -json -typederrors -transform=upper -output=generated_job_status.go"; DO NOT EDIT.

package models

import (
	"database/sql/driver"
	"encoding/json"
	"errors"
	"fmt"
	"github.com/dmarkham/enumer/enumerrs"
	"strings"
)

const _jobStatusEnumName = "UNKNOWNPENDINGERROREDCANCELEDFAILEDSUCCEEDED"

var _jobStatusEnumIndex = [...]uint8{0, 7, 14, 21, 29, 35, 44}

const _jobStatusEnumLowerName = "unknownpendingerroredcanceledfailedsucceeded"

func (i jobStatusEnum) String() string {
	if i < 0 || i >= jobStatusEnum(len(_jobStatusEnumIndex)-1) {
		return fmt.Sprintf("jobStatusEnum(%d)", i)
	}
	return _jobStatusEnumName[_jobStatusEnumIndex[i]:_jobStatusEnumIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _jobStatusEnumNoOp() {
	var x [1]struct{}
	_ = x[JobStatusUnknown-(0)]
	_ = x[JobStatusPending-(1)]
	_ = x[JobStatusErrored-(2)]
	_ = x[JobStatusCanceled-(3)]
	_ = x[JobStatusFailed-(4)]
	_ = x[JobStatusSucceeded-(5)]
}

var _jobStatusEnumValues = []jobStatusEnum{JobStatusUnknown, JobStatusPending, JobStatusErrored, JobStatusCanceled, JobStatusFailed, JobStatusSucceeded}

var _jobStatusEnumNameToValueMap = map[string]jobStatusEnum{
	_jobStatusEnumName[0:7]:        JobStatusUnknown,
	_jobStatusEnumLowerName[0:7]:   JobStatusUnknown,
	_jobStatusEnumName[7:14]:       JobStatusPending,
	_jobStatusEnumLowerName[7:14]:  JobStatusPending,
	_jobStatusEnumName[14:21]:      JobStatusErrored,
	_jobStatusEnumLowerName[14:21]: JobStatusErrored,
	_jobStatusEnumName[21:29]:      JobStatusCanceled,
	_jobStatusEnumLowerName[21:29]: JobStatusCanceled,
	_jobStatusEnumName[29:35]:      JobStatusFailed,
	_jobStatusEnumLowerName[29:35]: JobStatusFailed,
	_jobStatusEnumName[35:44]:      JobStatusSucceeded,
	_jobStatusEnumLowerName[35:44]: JobStatusSucceeded,
}

var _jobStatusEnumNames = []string{
	_jobStatusEnumName[0:7],
	_jobStatusEnumName[7:14],
	_jobStatusEnumName[14:21],
	_jobStatusEnumName[21:29],
	_jobStatusEnumName[29:35],
	_jobStatusEnumName[35:44],
}

// jobStatusEnumString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func jobStatusEnumString(s string) (jobStatusEnum, error) {
	if val, ok := _jobStatusEnumNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _jobStatusEnumNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, errors.Join(enumerrs.ErrValueInvalid, fmt.Errorf("%s does not belong to jobStatusEnum values", s))
}

// jobStatusEnumValues returns all values of the enum
func jobStatusEnumValues() []jobStatusEnum {
	return _jobStatusEnumValues
}

// jobStatusEnumStrings returns a slice of all String values of the enum
func jobStatusEnumStrings() []string {
	strs := make([]string, len(_jobStatusEnumNames))
	copy(strs, _jobStatusEnumNames)
	return strs
}

// IsAjobStatusEnum returns "true" if the value is listed in the enum definition. "false" otherwise
func (i jobStatusEnum) IsAjobStatusEnum() bool {
	for _, v := range _jobStatusEnumValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for jobStatusEnum
func (i jobStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for jobStatusEnum
func (i *jobStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("jobStatusEnum should be a string, got %s", data)
	}

	var err error
	*i, err = jobStatusEnumString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for jobStatusEnum
func (i jobStatusEnum) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for jobStatusEnum
func (i *jobStatusEnum) UnmarshalText(text []byte) error {
	var err error
	*i, err = jobStatusEnumString(string(text))
	return err
}

func (i jobStatusEnum) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *jobStatusEnum) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of jobStatusEnum: %[1]T(%[1]v)", value)
	}

	val, err := jobStatusEnumString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
