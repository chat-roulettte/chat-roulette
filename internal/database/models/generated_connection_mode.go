// Code generated by "enumer -type=ConnectionMode -text -json -sql -typederrors -trimprefix=ConnectionMode -transform=lower -output=generated_connection_mode.go"; DO NOT EDIT.

package models

import (
	"database/sql/driver"
	"encoding/json"
	"errors"
	"fmt"
	"github.com/dmarkham/enumer/enumerrs"
	"strings"
)

const _ConnectionModeName = "virtualphysicalhybrid"

var _ConnectionModeIndex = [...]uint8{0, 7, 15, 21}

const _ConnectionModeLowerName = "virtualphysicalhybrid"

func (i ConnectionMode) String() string {
	i -= 1
	if i < 0 || i >= ConnectionMode(len(_ConnectionModeIndex)-1) {
		return fmt.Sprintf("ConnectionMode(%d)", i+1)
	}
	return _ConnectionModeName[_ConnectionModeIndex[i]:_ConnectionModeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ConnectionModeNoOp() {
	var x [1]struct{}
	_ = x[ConnectionModeVirtual-(1)]
	_ = x[ConnectionModePhysical-(2)]
	_ = x[ConnectionModeHybrid-(3)]
}

var _ConnectionModeValues = []ConnectionMode{ConnectionModeVirtual, ConnectionModePhysical, ConnectionModeHybrid}

var _ConnectionModeNameToValueMap = map[string]ConnectionMode{
	_ConnectionModeName[0:7]:        ConnectionModeVirtual,
	_ConnectionModeLowerName[0:7]:   ConnectionModeVirtual,
	_ConnectionModeName[7:15]:       ConnectionModePhysical,
	_ConnectionModeLowerName[7:15]:  ConnectionModePhysical,
	_ConnectionModeName[15:21]:      ConnectionModeHybrid,
	_ConnectionModeLowerName[15:21]: ConnectionModeHybrid,
}

var _ConnectionModeNames = []string{
	_ConnectionModeName[0:7],
	_ConnectionModeName[7:15],
	_ConnectionModeName[15:21],
}

// ConnectionModeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ConnectionModeString(s string) (ConnectionMode, error) {
	if val, ok := _ConnectionModeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ConnectionModeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, errors.Join(enumerrs.ErrValueInvalid, fmt.Errorf("%s does not belong to ConnectionMode values", s))
}

// ConnectionModeValues returns all values of the enum
func ConnectionModeValues() []ConnectionMode {
	return _ConnectionModeValues
}

// ConnectionModeStrings returns a slice of all String values of the enum
func ConnectionModeStrings() []string {
	strs := make([]string, len(_ConnectionModeNames))
	copy(strs, _ConnectionModeNames)
	return strs
}

// IsAConnectionMode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ConnectionMode) IsAConnectionMode() bool {
	for _, v := range _ConnectionModeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ConnectionMode
func (i ConnectionMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ConnectionMode
func (i *ConnectionMode) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ConnectionMode should be a string, got %s", data)
	}

	var err error
	*i, err = ConnectionModeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for ConnectionMode
func (i ConnectionMode) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for ConnectionMode
func (i *ConnectionMode) UnmarshalText(text []byte) error {
	var err error
	*i, err = ConnectionModeString(string(text))
	return err
}

func (i ConnectionMode) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *ConnectionMode) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of ConnectionMode: %[1]T(%[1]v)", value)
	}

	val, err := ConnectionModeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
