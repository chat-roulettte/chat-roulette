// Code generated by "enumer -type=jobTypeEnum -trimprefix=JobType -text -sql -json -typederrors -transform=snake-upper -output=generated_job_type.go"; DO NOT EDIT.

package models

import (
	"database/sql/driver"
	"encoding/json"
	"errors"
	"fmt"
	"github.com/dmarkham/enumer/enumerrs"
	"strings"
)

const _jobTypeEnumName = "UNKNOWNADD_CHANNELGREET_ADMINUPDATE_CHANNELDELETE_CHANNELSYNC_CHANNELSADD_MEMBERUPDATE_MEMBERGREET_MEMBERDELETE_MEMBERSYNC_MEMBERSCREATE_ROUNDEND_ROUNDCREATE_MATCHESREPORT_MATCHESCREATE_MATCHUPDATE_MATCHCREATE_PAIRNOTIFY_PAIRKICKOFF_PAIRNOTIFY_MEMBERCHECK_PAIRREPORT_STATSMARK_INACTIVEBLOCK_MEMBERUNBLOCK_MEMBER"

var _jobTypeEnumIndex = [...]uint16{0, 7, 18, 29, 43, 57, 70, 80, 93, 105, 118, 130, 142, 151, 165, 179, 191, 203, 214, 225, 237, 250, 260, 272, 285, 297, 311}

const _jobTypeEnumLowerName = "unknownadd_channelgreet_adminupdate_channeldelete_channelsync_channelsadd_memberupdate_membergreet_memberdelete_membersync_memberscreate_roundend_roundcreate_matchesreport_matchescreate_matchupdate_matchcreate_pairnotify_pairkickoff_pairnotify_membercheck_pairreport_statsmark_inactiveblock_memberunblock_member"

func (i jobTypeEnum) String() string {
	if i < 0 || i >= jobTypeEnum(len(_jobTypeEnumIndex)-1) {
		return fmt.Sprintf("jobTypeEnum(%d)", i)
	}
	return _jobTypeEnumName[_jobTypeEnumIndex[i]:_jobTypeEnumIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _jobTypeEnumNoOp() {
	var x [1]struct{}
	_ = x[JobTypeUnknown-(0)]
	_ = x[JobTypeAddChannel-(1)]
	_ = x[JobTypeGreetAdmin-(2)]
	_ = x[JobTypeUpdateChannel-(3)]
	_ = x[JobTypeDeleteChannel-(4)]
	_ = x[JobTypeSyncChannels-(5)]
	_ = x[JobTypeAddMember-(6)]
	_ = x[JobTypeUpdateMember-(7)]
	_ = x[JobTypeGreetMember-(8)]
	_ = x[JobTypeDeleteMember-(9)]
	_ = x[JobTypeSyncMembers-(10)]
	_ = x[JobTypeCreateRound-(11)]
	_ = x[JobTypeEndRound-(12)]
	_ = x[JobTypeCreateMatches-(13)]
	_ = x[JobTypeReportMatches-(14)]
	_ = x[JobTypeCreateMatch-(15)]
	_ = x[JobTypeUpdateMatch-(16)]
	_ = x[JobTypeCreatePair-(17)]
	_ = x[JobTypeNotifyPair-(18)]
	_ = x[JobTypeKickoffPair-(19)]
	_ = x[JobTypeNotifyMember-(20)]
	_ = x[JobTypeCheckPair-(21)]
	_ = x[JobTypeReportStats-(22)]
	_ = x[JobTypeMarkInactive-(23)]
	_ = x[JobTypeBlockMember-(24)]
	_ = x[JobTypeUnblockMember-(25)]
}

var _jobTypeEnumValues = []jobTypeEnum{JobTypeUnknown, JobTypeAddChannel, JobTypeGreetAdmin, JobTypeUpdateChannel, JobTypeDeleteChannel, JobTypeSyncChannels, JobTypeAddMember, JobTypeUpdateMember, JobTypeGreetMember, JobTypeDeleteMember, JobTypeSyncMembers, JobTypeCreateRound, JobTypeEndRound, JobTypeCreateMatches, JobTypeReportMatches, JobTypeCreateMatch, JobTypeUpdateMatch, JobTypeCreatePair, JobTypeNotifyPair, JobTypeKickoffPair, JobTypeNotifyMember, JobTypeCheckPair, JobTypeReportStats, JobTypeMarkInactive, JobTypeBlockMember, JobTypeUnblockMember}

var _jobTypeEnumNameToValueMap = map[string]jobTypeEnum{
	_jobTypeEnumName[0:7]:          JobTypeUnknown,
	_jobTypeEnumLowerName[0:7]:     JobTypeUnknown,
	_jobTypeEnumName[7:18]:         JobTypeAddChannel,
	_jobTypeEnumLowerName[7:18]:    JobTypeAddChannel,
	_jobTypeEnumName[18:29]:        JobTypeGreetAdmin,
	_jobTypeEnumLowerName[18:29]:   JobTypeGreetAdmin,
	_jobTypeEnumName[29:43]:        JobTypeUpdateChannel,
	_jobTypeEnumLowerName[29:43]:   JobTypeUpdateChannel,
	_jobTypeEnumName[43:57]:        JobTypeDeleteChannel,
	_jobTypeEnumLowerName[43:57]:   JobTypeDeleteChannel,
	_jobTypeEnumName[57:70]:        JobTypeSyncChannels,
	_jobTypeEnumLowerName[57:70]:   JobTypeSyncChannels,
	_jobTypeEnumName[70:80]:        JobTypeAddMember,
	_jobTypeEnumLowerName[70:80]:   JobTypeAddMember,
	_jobTypeEnumName[80:93]:        JobTypeUpdateMember,
	_jobTypeEnumLowerName[80:93]:   JobTypeUpdateMember,
	_jobTypeEnumName[93:105]:       JobTypeGreetMember,
	_jobTypeEnumLowerName[93:105]:  JobTypeGreetMember,
	_jobTypeEnumName[105:118]:      JobTypeDeleteMember,
	_jobTypeEnumLowerName[105:118]: JobTypeDeleteMember,
	_jobTypeEnumName[118:130]:      JobTypeSyncMembers,
	_jobTypeEnumLowerName[118:130]: JobTypeSyncMembers,
	_jobTypeEnumName[130:142]:      JobTypeCreateRound,
	_jobTypeEnumLowerName[130:142]: JobTypeCreateRound,
	_jobTypeEnumName[142:151]:      JobTypeEndRound,
	_jobTypeEnumLowerName[142:151]: JobTypeEndRound,
	_jobTypeEnumName[151:165]:      JobTypeCreateMatches,
	_jobTypeEnumLowerName[151:165]: JobTypeCreateMatches,
	_jobTypeEnumName[165:179]:      JobTypeReportMatches,
	_jobTypeEnumLowerName[165:179]: JobTypeReportMatches,
	_jobTypeEnumName[179:191]:      JobTypeCreateMatch,
	_jobTypeEnumLowerName[179:191]: JobTypeCreateMatch,
	_jobTypeEnumName[191:203]:      JobTypeUpdateMatch,
	_jobTypeEnumLowerName[191:203]: JobTypeUpdateMatch,
	_jobTypeEnumName[203:214]:      JobTypeCreatePair,
	_jobTypeEnumLowerName[203:214]: JobTypeCreatePair,
	_jobTypeEnumName[214:225]:      JobTypeNotifyPair,
	_jobTypeEnumLowerName[214:225]: JobTypeNotifyPair,
	_jobTypeEnumName[225:237]:      JobTypeKickoffPair,
	_jobTypeEnumLowerName[225:237]: JobTypeKickoffPair,
	_jobTypeEnumName[237:250]:      JobTypeNotifyMember,
	_jobTypeEnumLowerName[237:250]: JobTypeNotifyMember,
	_jobTypeEnumName[250:260]:      JobTypeCheckPair,
	_jobTypeEnumLowerName[250:260]: JobTypeCheckPair,
	_jobTypeEnumName[260:272]:      JobTypeReportStats,
	_jobTypeEnumLowerName[260:272]: JobTypeReportStats,
	_jobTypeEnumName[272:285]:      JobTypeMarkInactive,
	_jobTypeEnumLowerName[272:285]: JobTypeMarkInactive,
	_jobTypeEnumName[285:297]:      JobTypeBlockMember,
	_jobTypeEnumLowerName[285:297]: JobTypeBlockMember,
	_jobTypeEnumName[297:311]:      JobTypeUnblockMember,
	_jobTypeEnumLowerName[297:311]: JobTypeUnblockMember,
}

var _jobTypeEnumNames = []string{
	_jobTypeEnumName[0:7],
	_jobTypeEnumName[7:18],
	_jobTypeEnumName[18:29],
	_jobTypeEnumName[29:43],
	_jobTypeEnumName[43:57],
	_jobTypeEnumName[57:70],
	_jobTypeEnumName[70:80],
	_jobTypeEnumName[80:93],
	_jobTypeEnumName[93:105],
	_jobTypeEnumName[105:118],
	_jobTypeEnumName[118:130],
	_jobTypeEnumName[130:142],
	_jobTypeEnumName[142:151],
	_jobTypeEnumName[151:165],
	_jobTypeEnumName[165:179],
	_jobTypeEnumName[179:191],
	_jobTypeEnumName[191:203],
	_jobTypeEnumName[203:214],
	_jobTypeEnumName[214:225],
	_jobTypeEnumName[225:237],
	_jobTypeEnumName[237:250],
	_jobTypeEnumName[250:260],
	_jobTypeEnumName[260:272],
	_jobTypeEnumName[272:285],
	_jobTypeEnumName[285:297],
	_jobTypeEnumName[297:311],
}

// jobTypeEnumString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func jobTypeEnumString(s string) (jobTypeEnum, error) {
	if val, ok := _jobTypeEnumNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _jobTypeEnumNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, errors.Join(enumerrs.ErrValueInvalid, fmt.Errorf("%s does not belong to jobTypeEnum values", s))
}

// jobTypeEnumValues returns all values of the enum
func jobTypeEnumValues() []jobTypeEnum {
	return _jobTypeEnumValues
}

// jobTypeEnumStrings returns a slice of all String values of the enum
func jobTypeEnumStrings() []string {
	strs := make([]string, len(_jobTypeEnumNames))
	copy(strs, _jobTypeEnumNames)
	return strs
}

// IsAjobTypeEnum returns "true" if the value is listed in the enum definition. "false" otherwise
func (i jobTypeEnum) IsAjobTypeEnum() bool {
	for _, v := range _jobTypeEnumValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for jobTypeEnum
func (i jobTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for jobTypeEnum
func (i *jobTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("jobTypeEnum should be a string, got %s", data)
	}

	var err error
	*i, err = jobTypeEnumString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for jobTypeEnum
func (i jobTypeEnum) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for jobTypeEnum
func (i *jobTypeEnum) UnmarshalText(text []byte) error {
	var err error
	*i, err = jobTypeEnumString(string(text))
	return err
}

func (i jobTypeEnum) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *jobTypeEnum) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of jobTypeEnum: %[1]T(%[1]v)", value)
	}

	val, err := jobTypeEnumString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
