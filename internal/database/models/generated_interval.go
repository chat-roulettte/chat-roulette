// Code generated by "enumer -type=IntervalEnum -text -sql -json -typederrors -transform=lower -output=generated_interval.go"; DO NOT EDIT.

package models

import (
	"database/sql/driver"
	"encoding/json"
	"errors"
	"fmt"
	"github.com/dmarkham/enumer/enumerrs"
	"strings"
)

const (
	_IntervalEnumName_0      = "weekly"
	_IntervalEnumLowerName_0 = "weekly"
	_IntervalEnumName_1      = "biweekly"
	_IntervalEnumLowerName_1 = "biweekly"
	_IntervalEnumName_2      = "triweekly"
	_IntervalEnumLowerName_2 = "triweekly"
	_IntervalEnumName_3      = "quadweekly"
	_IntervalEnumLowerName_3 = "quadweekly"
	_IntervalEnumName_4      = "monthly"
	_IntervalEnumLowerName_4 = "monthly"
)

var (
	_IntervalEnumIndex_0 = [...]uint8{0, 6}
	_IntervalEnumIndex_1 = [...]uint8{0, 8}
	_IntervalEnumIndex_2 = [...]uint8{0, 9}
	_IntervalEnumIndex_3 = [...]uint8{0, 10}
	_IntervalEnumIndex_4 = [...]uint8{0, 7}
)

func (i IntervalEnum) String() string {
	switch {
	case i == 7:
		return _IntervalEnumName_0
	case i == 14:
		return _IntervalEnumName_1
	case i == 21:
		return _IntervalEnumName_2
	case i == 28:
		return _IntervalEnumName_3
	case i == 30:
		return _IntervalEnumName_4
	default:
		return fmt.Sprintf("IntervalEnum(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _IntervalEnumNoOp() {
	var x [1]struct{}
	_ = x[Weekly-(7)]
	_ = x[Biweekly-(14)]
	_ = x[Triweekly-(21)]
	_ = x[Quadweekly-(28)]
	_ = x[Monthly-(30)]
}

var _IntervalEnumValues = []IntervalEnum{Weekly, Biweekly, Triweekly, Quadweekly, Monthly}

var _IntervalEnumNameToValueMap = map[string]IntervalEnum{
	_IntervalEnumName_0[0:6]:       Weekly,
	_IntervalEnumLowerName_0[0:6]:  Weekly,
	_IntervalEnumName_1[0:8]:       Biweekly,
	_IntervalEnumLowerName_1[0:8]:  Biweekly,
	_IntervalEnumName_2[0:9]:       Triweekly,
	_IntervalEnumLowerName_2[0:9]:  Triweekly,
	_IntervalEnumName_3[0:10]:      Quadweekly,
	_IntervalEnumLowerName_3[0:10]: Quadweekly,
	_IntervalEnumName_4[0:7]:       Monthly,
	_IntervalEnumLowerName_4[0:7]:  Monthly,
}

var _IntervalEnumNames = []string{
	_IntervalEnumName_0[0:6],
	_IntervalEnumName_1[0:8],
	_IntervalEnumName_2[0:9],
	_IntervalEnumName_3[0:10],
	_IntervalEnumName_4[0:7],
}

// IntervalEnumString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func IntervalEnumString(s string) (IntervalEnum, error) {
	if val, ok := _IntervalEnumNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _IntervalEnumNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, errors.Join(enumerrs.ErrValueInvalid, fmt.Errorf("%s does not belong to IntervalEnum values", s))
}

// IntervalEnumValues returns all values of the enum
func IntervalEnumValues() []IntervalEnum {
	return _IntervalEnumValues
}

// IntervalEnumStrings returns a slice of all String values of the enum
func IntervalEnumStrings() []string {
	strs := make([]string, len(_IntervalEnumNames))
	copy(strs, _IntervalEnumNames)
	return strs
}

// IsAIntervalEnum returns "true" if the value is listed in the enum definition. "false" otherwise
func (i IntervalEnum) IsAIntervalEnum() bool {
	for _, v := range _IntervalEnumValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for IntervalEnum
func (i IntervalEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for IntervalEnum
func (i *IntervalEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("IntervalEnum should be a string, got %s", data)
	}

	var err error
	*i, err = IntervalEnumString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for IntervalEnum
func (i IntervalEnum) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for IntervalEnum
func (i *IntervalEnum) UnmarshalText(text []byte) error {
	var err error
	*i, err = IntervalEnumString(string(text))
	return err
}

func (i IntervalEnum) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *IntervalEnum) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of IntervalEnum: %[1]T(%[1]v)", value)
	}

	val, err := IntervalEnumString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
